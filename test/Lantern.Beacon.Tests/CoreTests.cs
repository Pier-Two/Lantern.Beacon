using System.Buffers;
using System.Text;
using Lantern.Beacon.Networking.Encoding;
using Lantern.Beacon.Storage;
using Lantern.Beacon.Sync.Types;
using Lantern.Beacon.Sync.Types.Ssz.Altair;
using Lantern.Beacon.Sync.Types.Ssz.Deneb;
using Lantern.Beacon.Sync.Types.Ssz.Phase0;
using Microsoft.Extensions.Logging;
using Nethermind.Libp2p.Core;
using NUnit.Framework;
using SszSharp;

namespace Lantern.Beacon.Tests;

[TestFixture]
public class CoreTests
{
    [Test]
    public void Test()
    {
        var data = Convert.FromHexString(
            "54FF060000734E6150705900370000455DEC3E54106A95A1A9009A01009C4D611D5B93FDAB69013A7F0A2F961CACA0C853F87CFE9595FE500381630793600000000000000000");
        var result = ReqRespHelpers.DecodeRequest(data);
        var status = Status.Deserialize(result);
        Console.WriteLine(status.FinalizedEpoch);
    }
    //
    // [Test]
    // public void DbStoreTest()
    // {
    //     var options = new BeaconClientOptions();
    //     var loggerFactory = new LoggerFactory();
    //     var db = new LiteDbService(options, loggerFactory);
    //     var oldUpdate = DenebLightClientFinalityUpdate.CreateDefault();
    //     
    //     db.StoreOrUpdate(nameof(DenebLightClientFinalityUpdate), oldUpdate);
    // }
    //
    // [Test]
    // public void DbReadTest()
    // {
    //     var options = new BeaconClientOptions();
    //     var loggerFactory = new LoggerFactory();
    //     var db = new LiteDbService(options, loggerFactory);
    //     
    //     var store = db.Fetch<ForkType>(nameof(ForkType));
    //     
    //     if(store != null)
    //         Console.WriteLine(store);
    // }
    //
    // [Test]
    // public void DbUpdateTest()
    // { 
    //     var options = new BeaconClientOptions();
    //     var loggerFactory = new LoggerFactory();
    //     var db = new LiteDbService(options, loggerFactory);
    //     var newUpdate = DenebLightClientFinalityUpdate.Deserialize(Convert.FromHexString(
    //         "70010000ac04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d3df3b000000000017000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffizePreset.MainnetPreset);
    //     
    //     db.StoreOrUpdate(nameof(DenebLightClientFinalityUpdate), newUpdate);
    // }
    
    
    public static ulong Decode(Span<byte> line, ref int offset)
    {
        ulong res = 0;
        for (int i = 0; i < 9; i++)
        {
            if ((line[offset + i] & 128) == 0)
            {
                for (int j = offset + i; j >= offset; j--)
                {
                    res <<= 7;
                    res |= (ulong)line[j] & 127;
                }

                offset += i + 1;
                return res;
            }
        }

        return 0;
    }
}